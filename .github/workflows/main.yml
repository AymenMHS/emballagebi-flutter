name: Build Flutter APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-latest
    env:
      ANDROID_SDK_ROOT: /usr/local/share/android-sdk

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Pub
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}

      - name: Setup Java (Temurin 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.10.6'

      - name: Install Android SDK components
        run: |
          # Ensure sdkmanager is available and install required components
          yes | sdkmanager --install "platform-tools" "platforms;android-33" "build-tools;33.0.2" "cmdline-tools;latest"
        env:
          ANDROID_SDK_ROOT: /usr/local/share/android-sdk
          PATH: /usr/local/share/android-sdk/cmdline-tools/latest/bin:${{ env.PATH }}

      - name: Accept Android SDK licenses
        run: yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
        env:
          ANDROID_SDK_ROOT: /usr/local/share/android-sdk

      - name: Flutter pub get
        run: flutter pub get

      - name: Build debug APK
        run: flutter build apk --debug --no-shrink

      - name: Build release APK (unsigned)
        run: flutter build apk --release --no-shrink

      - name: Upload artifacts (debug & release)
        uses: actions/upload-artifact@v4
        with:
          name: flutter-apks
          path: |
            build/app/outputs/flutter-apk/app-debug.apk
            build/app/outputs/flutter-apk/app-release.apk

# ---------------- Optional signing block (uncomment & configure secrets to enable)
# To sign the release APK, provide these GitHub Secrets in your repository:
# ANDROID_KEYSTORE (base64 encoded keystore file), KEYSTORE_PASSWORD, KEY_ALIAS, KEY_PASSWORD
#
#      - name: Decode keystore (optional)
#        if: ${{ secrets.ANDROID_KEYSTORE != '' }}
#        run: |
#          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > release.keystore
#        env:
#          ANDROID_SDK_ROOT: /usr/local/share/android-sdk
#
#      - name: Align & Sign APK (optional)
#        if: ${{ secrets.ANDROID_KEYSTORE != '' }}
#        run: |
#          APK_IN=build/app/outputs/flutter-apk/app-release.apk
#          ZIPALIGNED=app-release-aligned.apk
#          SIGNED=app-release-signed.apk
#
#          # zipalign (comes with build-tools)
#          /usr/local/share/android-sdk/build-tools/33.0.2/zipalign -v -p 4 "$APK_IN" "$ZIPALIGNED"
#
#          # apksigner (comes with build-tools)
#          /usr/local/share/android-sdk/build-tools/33.0.2/apksigner sign \
#            --ks release.keystore \
#            --ks-pass pass:${{ secrets.KEYSTORE_PASSWORD }} \
#            --key-pass pass:${{ secrets.KEY_PASSWORD }} \
#            --out "$SIGNED" "$ZIPALIGNED"
#
#      - name: Upload signed APK (optional)
#        if: ${{ secrets.ANDROID_KEYSTORE != '' }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: signed-apk
#          path: app-release-signed.apk
